/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.8.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.springBoot.fruits_ecommerce.controllers;

import com.springBoot.fruits_ecommerce.models.AddProductRequest;
import com.springBoot.fruits_ecommerce.models.ErrorResponse;
import com.springBoot.fruits_ecommerce.models.Product;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-10-08T05:28:46.695203900+03:00[Asia/Riyadh]", comments = "Generator version: 7.8.0")
@Validated
@Tag(name = "Products", description = "Operations for managing products")
public interface ProductsApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /products : Create a new product
     *
     * @param addProductRequest (required)
     * @return Product successfully created (status code 201)
     *         or Invalid input data (status code 400)
     */
    @Operation(operationId = "createProduct", summary = "Create a new product", tags = { "Products" }, responses = {
            @ApiResponse(responseCode = "201", description = "Product successfully created", content = {
                    @Content(mediaType = "application/json", schema = @Schema(implementation = Product.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid input data", content = {
                    @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
    })
    @RequestMapping(method = RequestMethod.POST, value = "/products", produces = { "application/json" }, consumes = {
            "application/json" })

    default ResponseEntity<Product> createProduct(
            @Parameter(name = "AddProductRequest", description = "", required = true) @Valid @RequestBody AddProductRequest addProductRequest) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"unit\" : \"unit\", \"quantity\" : 1, \"price\" : 6.0274563, \"imagePath\" : \"imagePath\", \"name\" : \"name\", \"description\" : \"description\", \"id\" : 0 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"message\" : \"Invalid input\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

    /**
     * DELETE /products/{id} : Delete a product by its ID
     *
     * @param id ID of the product to delete (required)
     * @return Product successfully deleted (status code 204)
     *         or Product not found (status code 404)
     */
    @Operation(operationId = "deleteProduct", summary = "Delete a product by its ID", tags = {
            "Products" }, responses = {
                    @ApiResponse(responseCode = "204", description = "Product successfully deleted"),
                    @ApiResponse(responseCode = "404", description = "Product not found", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
                    })
            })
    @RequestMapping(method = RequestMethod.DELETE, value = "/products/{id}", produces = { "application/json" })

    default ResponseEntity<Void> deleteProduct(
            @Parameter(name = "id", description = "ID of the product to delete", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"message\" : \"Invalid input\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

    /**
     * GET /products : Retrieve all products (with pagination)
     *
     * @param page Page number (starting from 0) (optional, default to 0)
     * @param size Page size (number of products per page) (optional, default to 10)
     * @return Products retrieved successfully (status code 200)
     *         or Invalid pagination parameters (status code 400)
     */
    @Operation(operationId = "getAllProducts", summary = "Retrieve all products (with pagination)", tags = {
            "Products" }, responses = {
                    @ApiResponse(responseCode = "200", description = "Products retrieved successfully", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Product.class))
                    }),
                    @ApiResponse(responseCode = "400", description = "Invalid pagination parameters", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
                    })
            })
    @RequestMapping(method = RequestMethod.GET, value = "/products", produces = { "application/json" })

    default ResponseEntity<Product> getAllProducts(
            @Parameter(name = "page", description = "Page number (starting from 0)", in = ParameterIn.QUERY) @Valid @RequestParam(value = "page", required = false, defaultValue = "0") Integer page,
            @Parameter(name = "size", description = "Page size (number of products per page)", in = ParameterIn.QUERY) @Valid @RequestParam(value = "size", required = false, defaultValue = "10") Integer size) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"unit\" : \"unit\", \"quantity\" : 1, \"price\" : 6.0274563, \"imagePath\" : \"imagePath\", \"name\" : \"name\", \"description\" : \"description\", \"id\" : 0 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"message\" : \"Invalid input\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

    /**
     * GET /products/{id} : Retrieve a product by its ID
     *
     * @param id ID of the product to retrieve (required)
     * @return Product retrieved successfully (status code 200)
     *         or Product not found (status code 404)
     */
    @Operation(operationId = "getProduct", summary = "Retrieve a product by its ID", tags = {
            "Products" }, responses = {
                    @ApiResponse(responseCode = "200", description = "Product retrieved successfully", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Product.class))
                    }),
                    @ApiResponse(responseCode = "404", description = "Product not found", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
                    })
            })
    @RequestMapping(method = RequestMethod.GET, value = "/products/{id}", produces = { "application/json" })

    default ResponseEntity<Product> getProduct(
            @Parameter(name = "id", description = "ID of the product to retrieve", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"unit\" : \"unit\", \"quantity\" : 1, \"price\" : 6.0274563, \"imagePath\" : \"imagePath\", \"name\" : \"name\", \"description\" : \"description\", \"id\" : 0 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"message\" : \"Invalid input\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

    /**
     * PUT /products/{id} : Update an existing product by its ID
     *
     * @param id          ID of the product to update (required)
     * @param name        Name of the product (optional)
     * @param unit        Unit of the product (optional)
     * @param price       Price of the product (optional)
     * @param quantity    Quantity of the product (optional)
     * @param description Description of the product (optional)
     * @param image       Image of the product (optional)
     * @return Product updated successfully (status code 200)
     *         or Product not found (status code 404)
     */
    @Operation(operationId = "updateProduct", summary = "Update an existing product by its ID", tags = {
            "Products" }, responses = {
                    @ApiResponse(responseCode = "200", description = "Product updated successfully", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Product.class))
                    }),
                    @ApiResponse(responseCode = "404", description = "Product not found", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
                    })
            })
    @RequestMapping(method = RequestMethod.PUT, value = "/products/{id}", produces = {
            "application/json" }, consumes = { "multipart/form-data" })

    default ResponseEntity<Product> updateProduct(
            @Parameter(name = "id", description = "ID of the product to update", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id,
            @Parameter(name = "name", description = "Name of the product") @Valid @RequestParam(value = "name", required = false) String name,
            @Parameter(name = "unit", description = "Unit of the product") @Valid @RequestParam(value = "unit", required = false) String unit,
            @Parameter(name = "price", description = "Price of the product") @Valid @RequestParam(value = "price", required = false) Float price,
            @Parameter(name = "quantity", description = "Quantity of the product") @Valid @RequestParam(value = "quantity", required = false) Integer quantity,
            @Parameter(name = "description", description = "Description of the product") @Valid @RequestParam(value = "description", required = false) String description,
            @Parameter(name = "image", description = "Image of the product") @RequestPart(value = "image", required = false) MultipartFile image) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"unit\" : \"unit\", \"quantity\" : 1, \"price\" : 6.0274563, \"imagePath\" : \"imagePath\", \"name\" : \"name\", \"description\" : \"description\", \"id\" : 0 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"message\" : \"Invalid input\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
